#!/usr/bin/env sh

error() {
  echo $1 > /dev/stderr
  exit ${2:-1}
}

USER_PROFILE=$(cat << END
#!/usr/bin/env sh

export HOME=/opt/home/${USER}
cd \${HOME}

# bash-start
[ -f /opt/bin/bash ] && exec /opt/bin/bash
# bash-end
END
)

SAMBA_EXPORTS=$(cat << END
[certs]
comment = Certificates
path = /opt/home/${USER}/.certs
dos filetimes = yes
fake directory create times = yes
valid users = ${USER}
invalid users =
read list = ${USER}
write list =
END
)

init_asuswrt() {
  export HOME=/opt/home/${USER}
  export ETC=/opt/etc

  # setup ssh
  mkdir -p -m 700 ${HOME}/.ssh
  cp /tmp/home/root/.ssh/* ${HOME}/.ssh
  read -s "Copied keys to ${HOME}/.ssh?" answer < /dev/tty ; echo
  if [ ${answer} != y* ] ; then
    setup_ssh
  fi
  chmod 600 ${HOME}/.ssh/*

  opkg update
  opkg upgrade
  opkg install bash libncursesw vim-full vim-runtime git git-http locales htop dropbearconvert python3 nginx \
    findutils tar rsync gzip coreutils coreutils-dd coreutils-id coreutils-mktemp coreutils-stat coreutils-whoami coreutils-mkfifo \
    procps-ng-pkill shadow screen iptables lsblk fdisk file samba4-utils

  # fix git ssh
  echo "dbclient -y -i ${HOME}/.ssh/id_rsa \$*" > ${HOME}/.gitssh.sh
  chmod +x ${HOME}/.gitssh.sh
  export GIT_SSH=${HOME}/.gitssh.sh

  # reroute home
  echo "${USER_PROFILE}" > ${HOME}/.profile
  echo -e "[ -f /opt/home/${USER}/.profile ] && . /opt/home/${USER}/.profile # UserProfile" >> /jffs/configs/profile.add

  # UID=1000
  # echo "${USER}:x:${UID}:${UID}::/home/${USER}:/usr/bin/bash" > /jffs/configs/passwd.add
  # echo "${USER}:*:0:0:99999:7:0:0:" > /jffs/configs/shadow.add
  # echo "${USER}:x:${UID}:" > /jffs/configs/group.add
  # echo "${USER}:x::" > /jffs/configs/gshadow.add

  # export certs
  mkdir -p ${HOME}/.certs

  # sudo
  mkdir -m ${HOME}/.local/bin
  echo -e '!/bin/sh\n"$@"' > ${HOME}/.local/bin/sudo
  chmod +x ${HOME}/.local/bin/sudo

  # export home using samba
  echo "${SAMBA_EXPORTS}" > /jffs/configs/smb.conf.add

  # fix nginx start
  sed -e "s/started.'/started.' \&/" -i ${ETC}/init.d/S80nginx
}

setup_ssh() {
  if [ ! -f ~/.ssh/id_rsa.pub ] ; then
    mkdir -p -m 700 ~/.ssh
    if type -t dropbearkey > /dev/null ; then
      dropbearkey -f ~/.ssh/id_rsa -t rsa -s 2048 | grep ssh-rsa > ~/.ssh/id_rsa.pub
    else
      ssh-keygen -q -t rsa -N '' -f ~/.ssh/id_rsa
    fi

    [ $? -ne 0 ] && error "Error creating rsa key." $?
  fi

  echo "Public ssh key: "
  cat ~/.ssh/id_rsa.pub
  read -p "Is this key updated on github (https://github.com/settings/ssh/new)? [y/n]: " yesno < /dev/tty
  [ "${yesno}" != y -a "${yesno}" != yes ] && error "Update ssh key and try again."
}

setup_shenv() {
  if [ -d ~/.local/share/shenv ] ; then
    return
  fi

  mkdir -p ~/.local/share
  export GIT_SSH=~/.gitssh.sh
  git clone --recurse-submodules -c core.symlinks=true git@github.com:vm75/shenv.git ~/.local/share/shenv
  [ $? -ne 0 ] && error "Error cloning shenv repo." $?

  ~/.local/share/shenv/bin/shenv
}

main() {
  init_asuswrt
  setup_ssh
  setup_shenv
  . ${HOME}/.shenvrc

  # install apps
  os -i vaultwarden wireguard

  echo "All set!"
}

main "$@"

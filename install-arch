#!/usr/bin/env bash

SCRIPTNAME=install-arch
BOOTSTRAP_DIR=$(dirname "${BASH_SOURCE}")

# defaults
COUNTRIES=us,ca # -c
HOSTNAME=arch
USERNAME=admin
PASSWORD=admin

error() {
  local msg=${1}
  echo -e "\e[31m${SCRIPTNAME}: $1\e[0m"
  exit -1
}

checkError() {
  if [[ $? -ne 0 ]] ; then
    error "Failed $1"
  fi
}

usage() {
  echo "usage: ${SCRIPTNAME} -d <device> [options...]"
  echo "  options:"
  echo "    -n <hostname=server[.domain]>"
  echo "    -u <username=admin>"
  echo "    -p <password=admin>"
  echo "    -s <public sshkey>"
  echo "    -f <directory containing user files>"
  echo "    -w <wifi SSID>:<password>"

  exit 0
}

setup_mirrors() {
  # update
  echo "Installing reflector..."
  pacman -Sy --noconfirm --needed reflector archlinux-keyring
  checkError "installing reflector"

  # set mirrors
  echo "Setting up mirrors..."
  if [[ ! -f /etc/pacman.d/mirrorlist ]] ; then
    reflector -c "${COUNTRIES}" -f 12 -l 10 -n 12 --save /etc/pacman.d/mirrorlist
    checkError "setting mirrors"
  fi
}

parition_drive() {
  # confirm install to drive
  read -p "${DRIVE} will be wiped. Continue? (y/n) " -n 1 -r
  echo
  if [[ ! $REPLY =~ ^[Yy]$ ]] ; then
    exit 1
  fi

  # create partition
  echo "Partitioning ${DRIVE}: 1 EFI and 1 root..."
  (
    echo g   # Create a new empty GPT partition table
    echo n   # Add a new partition
    echo     # Auto-select partition number
    echo     # Auto-select partition start
    echo +1G # Partition Size
    echo t   # Change type
    echo 1   # EFI parttion
    echo     # Auto-select partition
    echo n   # Add a new partition
    echo     # Auto-select partition number
    echo     # Auto-select partition start
    echo     # Auto-select partition end

    echo w      # Write changes
  ) | fdisk -W always ${DRIVE}
  checkError "partitioning ${DRIVE}"

  if [[ $1 == custom ]] ; then
    if [[ -b ${DRIVE}1 && -b ${DRIVE}2 ]] ; then
      BOOT_PART=${DRIVE}1
      ROOT_PART=${DRIVE}2
    elif [[ -b ${DRIVE}p1 && -b ${DRIVE}p2 ]] ; then
      BOOT_PART=${DRIVE}p1
      ROOT_PART=${DRIVE}p2
    else
      error "Error detecting partitions"
    fi

    echo "Formatting boot partition (fat32): ${BOOT_PART}"
    mkfs.fat -F32 ${BOOT_PART}

    echo "Formatting root partition (btrfs): ${ROOT_PART}"
    mkfs.btrfs -L ${hostname} -f ${ROOT_PART}

    echo "Mounting root partition: ${ROOT_PART} -> ${MOUNT_DIR}"
    mount -t btrfs ${ROOT_PART} ${MOUNT_DIR}

    echo "Creating subvolumes: /@,/@home,/@log,/@pkg,/@.snapshots..."
    btrfs subv create ${MOUNT_DIR}/@
    btrfs subv create ${MOUNT_DIR}/@home
    btrfs subv create ${MOUNT_DIR}/@log
    btrfs subv create ${MOUNT_DIR}/@pkg
    btrfs subv create ${MOUNT_DIR}/@.snapshots

    mkdir -p ${MOUNT_DIR}/@/var/lib

    echo "Creating subvolumes: var/lib/portables,var/lib/machines..."
    btrfs subv create ${MOUNT_DIR}/@/var/lib/portables
    btrfs subv create ${MOUNT_DIR}/@/var/lib/machines

    btrfs subv list ${MOUNT_DIR}/

    umount ${MOUNT_DIR}

    echo "Mounting root partition: ${ROOT_PART} -> ${MOUNT_DIR}"
    mount -t btrfs -o rw,relatime,compress=zstd:3,ssd,discard=async,space_cache=v2,subvol=/@ ${ROOT_PART} ${MOUNT_DIR}

    echo "Creating directories: /home, /var/log, /var/cache/pacman/pkg, /.snapshots, /boot..."
    mkdir -p ${MOUNT_DIR}/home ${MOUNT_DIR}/var/log ${MOUNT_DIR}/var/cache/pacman/pkg ${MOUNT_DIR}/.snapshots ${MOUNT_DIR}/boot

    echo "Mounting subvolumes: /@home, /@log, /@pkg, /@.snapshots, /boot..."
    mount -t btrfs -o rw,relatime,compress=zstd:3,ssd,discard=async,space_cache=v2,subvol=/@home ${ROOT_PART} ${MOUNT_DIR}/home
    mount -t btrfs -o rw,relatime,compress=zstd:3,ssd,discard=async,space_cache=v2,subvol=/@log ${ROOT_PART} ${MOUNT_DIR}/var/log
    mount -t btrfs -o rw,relatime,compress=zstd:3,ssd,discard=async,space_cache=v2,subvol=/@pkg ${ROOT_PART} ${MOUNT_DIR}/var/cache/pacman/pkg
    mount -t btrfs -o rw,relatime,compress=zstd:3,ssd,discard=async,space_cache=v2,subvol=/@.snapshots ${ROOT_PART} ${MOUNT_DIR}/.snapshots
    mount -t vfat -o rw,relatime,fmask=0022,dmask=0022,codepage=437,iocharset=ascii,shortname=mixed,utf8,errors=remount-ro ${BOOT_PART} ${MOUNT_DIR}/boot
  fi
}

setup_bridge() {
  interface=$(nmcli device | grep ethernet -m 1 | sort | awk '{print $1}')
  uuid=$(nmcli -f UUID,TYPE con show | grep ethernet -m 1 | sort | awk '{print $1}')
  if [[ -z ${ETH_IP} ]]; then
    ip=$(ip -4 a show dev ${interface} | grep inet -m 1 | awk '{print $2}')
  else
    ip=${ETH_IP}
  fi

  if [[ -z "${interface}" || -z "${uuid}" ]]; then
    return
  fi

  echo "Setting up bridge: ${interface}"
  sudo nmcli con mod ${uuid} ifname ${interface} con-name ${interface}
  sudo nmcli con add type bridge ifname br0 con-name br0
  sudo nmcli con add type bridge-slave ifname ${interface} master br0 con-name ${interface}-slave
  if [[ -n ${ip} ]] ; then
    sudo nmcli con mod br0 ipv4.addresses "${ip}" ipv4.dhcp-hostname ${HOSTNAME%%.*} ipv4.ignore-auto-routes no ipv4.ignore-auto-dns no ipv4.method auto
  fi
  sudo nmcli con mod br0 ipv6.method ignore
  sudo nmcli con up br0

  echo "Bring up interface: ${interface}-slave"
  sudo nmcli con up ${interface}-slave
}

setup_wifi() {
  interface=$(nmcli device | grep wifi -m 1 | sort | awk '{print $1}')
  if [[ -z "${interface}" || -z "${WIFI_SSID}" || -z "${WIFI_PASSWORD}" ]]; then
    return
  fi

  psk=$(wpa_passphrase "${WIFI_SSID}" "${WIFI_PASSWORD}" | grep -e "\spsk" | cut -d= -f2)

  echo "Setting up wifi: ${interface}"
  sudo nmcli con add type wifi ifname ${interface} ssid "${WIFI_SSID}" con-name ${interface}
  sudo nmcli con mod ${interface} wifi-sec.key-mgmt wpa-psk wifi-sec.psk "${psk}"

  if [[ -n "${WIFI_IP}" ]]; then
    sudo nmcli con mod ${interface} ipv4.addresses "${WIFI_IP}"
  fi

  echo "Bring up interface: ${interface}"
  sudo nmcli con up ${interface}
}

mount_data_drive() {
  if [[ ! -b ${DATA_DRIVE}1 && ! -b ${DATA_DRIVE}p1 ]] ; then
    # create partition
    echo "Partitioning ${DATA_DRIVE}..."
    (
      echo g   # Create a new empty GPT partition table
      echo n   # Add a new partition
      echo     # Auto-select partition number
      echo     # Auto-select partition start
      echo     # Auto-select partition end

      echo w      # Write changes
    ) | fdisk -W always ${DATA_DRIVE}
    checkError "partitioning ${DATA_DRIVE}"
    if [[ -b ${DATA_DRIVE}1 ]] ; then
      DATA_PART=${DATA_DRIVE}1
    elif [[ -b ${DATA_DRIVE}p1 && -b ${DATA_DRIVE}p2 ]] ; then
      DATA_PART=${DATA_DRIVE}p1
    else
      error "Error detecting partitions"
    fi

    echo "Formatting data partition (btrfs): ${DATA_PART}..."
    mkfs.btrfs -L data -f ${DATA_PART}
    checkError "formatting data drive"
  else
    if [[ -b ${DATA_DRIVE}1 ]] ; then
      DATA_PART=${DATA_DRIVE}1
    elif [[ -b ${DATA_DRIVE}p1 && -b ${DATA_DRIVE}p2 ]] ; then
      DATA_PART=${DATA_DRIVE}p1
    fi
  fi

  DATA_DIR=/mnt/data
  mkdir -p ${DATA_DIR}

  echo "Mounting data partition: ${DATA_PART} -> ${DATA_DIR}..."
  mount -t btrfs ${DATA_PART} ${DATA_DIR}
  checkError "mounting data drive"

  echo "Creating subvolumes: /@home,/@vms,/@library..."
  btrfs subv create ${DATA_DIR}/@home
  btrfs subv create ${DATA_DIR}/@vms
  btrfs subv create ${DATA_DIR}/@library
}

setup_data_drive() {
  mount_data_drive

  uuid=$(blkid ${DATA_PART} -o value -s UUID)
  echo "Setting up fstab for data drive..."
  for vol in $(btrfs subv list ${DATA_DIR} | awk '{print $9}') ; do
    # if vol start with @
    if [[ "${vol}" == "@"* ]] ; then
      if [[ "${vol}" == "@home" ]] ; then
        echo "UUID=${uuid} /home/${USERNAME} btrfs rw,relatime,compress=zstd:3,ssd,discard=async,space_cache=v2,subvol=/${vol},nofail 0 0" >> ${MOUNT_DIR}/etc/fstab
        cp -r ${MOUNT_DIR}/home/${USERNAME}/. ${DATA_DIR}/@home
      else
        mkdir -p ${MOUNT_DIR}/home/${USERNAME}/${vol#\@}
        chown 1000:1000 ${MOUNT_DIR}/home/${USERNAME}/${vol#\@}
        echo "UUID=${uuid} /home/${USERNAME}/${vol#\@} btrfs rw,relatime,compress=zstd:3,ssd,discard=async,space_cache=v2,subvol=/${vol},nofail 0 0" >> ${MOUNT_DIR}/etc/fstab
      fi
    else
      mkdir -p ${MOUNT_DIR}/${vol}
      echo "UUID=${uuid} /${vol} btrfs rw,relatime,compress=zstd:3,ssd,discard=async,space_cache=v2,subvol=/${vol},nofail 0 0" >> ${MOUNT_DIR}/etc/fstab
    fi
  done
}

arch_install() {
  # log
  LOG_FILE=~/${SCRIPTNAME}.log
  exec > >(tee $LOG_FILE) 2>&1

  cd ${BOOTSTRAP_DIR}

  # setup arch mirrors
  setup_mirrors

  # partition and format target drive
  parition_drive

  echo "Copying configuration files..."

  PART_SIZE=$(fdisk -l ${DRIVE} | tail -1 | awk '{print $4 * 512}')
  cp -f user_configuration.tpl.json /tmp/user_configuration.json
  sed -e "s#DEV#${DRIVE}#g" -e "s#PART_SIZE#${PART_SIZE}#g" -e "s#HOSTNAME#${HOSTNAME}#g" -i /tmp/user_configuration.json

  cp -f user_credentials.tpl.json /tmp/user_credentials.json
  sed -e "s#PASSWORD#${PASSWORD}#g" -e "s#USERNAME#${USERNAME}#g" -i /tmp/user_credentials.json

  echo "Running archinstall..."
  archinstall --config /tmp/user_configuration.json --creds /tmp/user_credentials.json --silent
  checkError "archinstall"

  MOUNT_DIR=/mnt/archinstall

  # sudo
  echo "Enabling sudo for user ${USERNAME}"
  mkdir -p /etc/sudoers.d
  echo "${USERNAME} ALL=(ALL) NOPASSWD: ALL" > ${MOUNT_DIR}/etc/sudoers.d/00_${USERNAME}

  # copy files
  echo "Copying pacman mirror list..."
  cp /etc/pacman.d/mirrorlist ${MOUNT_DIR}/etc/pacman.d/mirrorlist

  echo "Copying user files..."
  USER_HOME=${MOUNT_DIR}/home/${USERNAME}
  if [[ -d ${USER_FILES} ]] ; then
    cp -ar "${USER_FILES}/." ${USER_HOME}
  elif $(file "${USER_FILES}" | grep -q compressed) ; then
    cd ${USER_HOME}
    tar xf "${USER_FILES}"
    cd -
  elif [[ -f ${USER_FILES} ]] ; then
    cp -a "${USER_FILES}" ${USER_HOME}
  fi

  # ssh key
  echo "Setting up ssh..."
  if [[ -n ${SSH_KEY} ]] ; then
    mkdir -p ${USER_HOME}/.ssh
    echo "${SSH_KEY}" >> ${USER_HOME}/.ssh/authorized_keys
  fi

  # ownership and permission
  if [[ -d ${USER_HOME}/.ssh ]] ; then
    chmod 700 ${USER_HOME}/.ssh
    chmod 600 ${USER_HOME}/.ssh/*
  fi

  if [[ -n ${SKIP_POST_INSTALL} ]] ; then
    return
  fi

  # post install
  mkdir -p ${USER_HOME}/.local/share
  cp -a ../bootstrap ${USER_HOME}/.local/share/bootstrap
  echo "Running post install..."
  arch-chroot -u ${USERNAME} ${MOUNT_DIR} /home/${USERNAME}/.local/share/bootstrap/install-arch --post-install

  # network
  if [[ -z ${SKIP_NETWORK} ]] ; then
    echo "Setting up network..."
    pacman -Sy --noconfirm networkmanager
    systemctl start NetworkManager
    setup_bridge
    setup_wifi
    mkdir -p ${MOUNT_DIR}/etc/NetworkManager/system-connections
    cp /etc/NetworkManager/system-connections/* ${MOUNT_DIR}/etc/NetworkManager/system-connections/
  fi

  # data-drive
  if [[ -n ${DATA_DRIVE} && -b ${DATA_DRIVE} ]] ; then
    setup_data_drive
  fi
}

install_yay() {
  # key for aur
  echo "Adding key for aur"
  sudo gpg --keyserver keyserver.ubuntu.com --recv-keys 5C4A26CD4CC8C397

  mkdir -p .aur
  cd .aur

  echo "Installing yay..."
  git clone https://aur.archlinux.org/yay.git
  cd yay
  makepkg -si --noconfirm
  checkError "installing yay"
  cd ~
}

post_install() {
  export USER=$(whoami)
  echo "Running post_install as ${USER}"

  export HOME=/home/${USER}
  cd ${HOME}

  sudo chown -R ${USER}:${USER} ${HOME}

  # crontab (for user)
  echo "Enabling crontab for user ${USER}"
  systemctl enable cronie

  # sshd
  echo "Enabling sshd"
  sudo systemctl enable sshd.service

  install_yay

  # install aur apps
  echo "Installing aur apps: cpulimit, ntfsprogs-ntfs3..."
  yay -Sy --needed --noconfirm cpulimit ntfsprogs-ntfs3 rc-local # udevil

  # vi
  echo "Setting up vi as vim"
  sudo rm -f /usr/bin/vi
  sudo ln -s /usr/bin/vim /usr/bin/vi

  # user
  echo "Adding group wheel and audio to user ${USER}"
  sudo usermod -aG wheel,audio ${USER}

  # aur services
  echo "Enabling rc-local service for user ${USER}"
  systemctl --user enable rc-local.service

  # packages
  if [[ -n ${PACKAGES} ]] ; then
    echo "Installing additional packages: ${PACKAGES}"
    yay -Sy --needed --noconfirm ${PACKAGES}
  fi

  # services
  if [[ -n ${SERVICES} ]] ; then
    echo "Enabling additional services: ${SERVICES}"
    sudo systemctl enable ${SERVICES}
  fi

  # user services
  if [[ -n ${USER_SERVICES} ]] ; then
    echo "Enabling additional user services: ${USER_SERVICES}"
    systemctl --user enable ${USER_SERVICES}
  fi

  # shenv
  if [[ -f ${HOME}/.gitconfig.vm75 ]] ; then
    echo "Setting up shenv"
    git clone --recurse-submodules git@github.com:vm75/shenv.git ${HOME}/.local/share/shenv
    ${HOME}/.local/share/shenv/bin/shenv

    # features
    if [[ -n ${FEATURES} ]] ; then
      echo "Installing additional features: ${FEATURES}"
      ${HOME}/.local/share/shenv/bin/os install ${FEATURES}
    fi
  fi

  exit 0
}

main() {
  if [[ $1 == --post-install ]] ; then
    post_install
  fi

  echo "Mounting CIDATA..."
  CIDATA_DIR=/mnt/cidata
  mkdir -p ${CIDATA_DIR}
  mount -L CIDATA ${CIDATA_DIR}
  checkError "mounting CIDATA"

  install_configs=(${CIDATA_DIR}/archinstall.*.conf)
  echo "Select an install config to use:"
  for i in "${!install_configs[@]}"; do
    echo "$((i + 1))) ${install_configs[i]}"
  done
  read -p "Enter the number of the config to use (0 to continue with defaults): " choice
  if ! [[ ${choice} =~ ^[0-9]+$ ]] || [[ ${choice} -lt 0 ]] || [[ ${choice} -gt ${#install_configs[@]} ]]; then
    echo "Invalid selection. Exiting."
    exit 1
  fi
  if [[ ${choice} -ne 0 ]] ; then
    CONFIG_FILE=${install_configs[$((choice - 1))]}
  fi

  while getopts "DNPc:d:h" option; do
    case "${option}" in
    D)
      set -x
      ;;
    N)
      SKIP_NETWORK=1
      ;;
    P)
      SKIP_POST_INSTALL=1
      ;;
    c)
      if [[ ! -f ${OPTARG} ]] ; then
        error "Invalid config file ${OPTARG}"
      fi
      CONFIG_FILE=${OPTARG}
      ;;
    d)
      if [[ -b /dev/${OPTARG} ]] ; then
        DRIVE_OVERRIDE="/dev/${OPTARG}"
      elif [[ -b ${OPTARG} ]] ; then
        DRIVE_OVERRIDE=${OPTARG}
      else
        error "Invalid drive ${OPTARG}"
      fi
      ;;
    h)
      usage
      exit
      ;;
    esac
  done
  shift $((OPTIND-1))

  # load config
  [[ -z ${CONFIG_FILE} ]] && error "No config file specified"
  . ${CONFIG_FILE}

  # override drive
  [[ -n ${DRIVE_OVERRIDE} ]] && DRIVE=${DRIVE_OVERRIDE}

  if [[ ! -b ${DRIVE} ]] ; then
    error "No valid drive found"
  fi

  arch_install
  echo "All set!"
}

main "$@"

#!/usr/bin/env bash

SCRIPTNAME=install-arch
BOOTSTRAP_DIR=$(dirname "${BASH_SOURCE}")

# log
LOG_FILE=~/${SCRIPTNAME}.log
exec > >(tee $LOG_FILE) 2>&1

# defaults
COUNTRIES=us,ca # -c

error() {
  local msg=${1}
  echo -e "\e[31m${SCRIPTNAME}: $1\e[0m"
  exit -1
}

checkError() {
  if [[ $? -ne 0 ]] ; then
    error "Failed $1"
  fi
}

usage() {
  echo "usage: ${SCRIPTNAME} -d <device> [options...]"
  echo "  options:"
  echo "    -n <hostname=server[.domain]>"
  echo "    -u <username=admin>"
  echo "    -p <password=admin>"
  echo "    -s <public sshkey>"
  echo "    -f <directory containing user files>"
  echo "    -w <wifi SSID>:<password>"

  exit 0
}

setup_mirrors() {
  # update
  pacman -Sy --noconfirm --needed reflector archlinux-keyring
  checkError "initializing pacman"

  # set mirrors
  echo "Setting up reflectors..."
  if [[ ! -f /etc/pacman.d/mirrorlist ]] ; then
    reflector -c "${COUNTRIES}" -f 12 -l 10 -n 12 --save /etc/pacman.d/mirrorlist
    checkError "setting reflectors"
  fi
}

parition_drive() {
  # create partition
  (
    echo g   # Create a new empty GPT partition table
    echo n   # Add a new partition
    echo     # Auto-select partition number
    echo     # Auto-select partition start
    echo +1G # Partition Size
    echo t   # Change type
    echo 1   # EFI parttion
    echo     # Auto-select partition
    echo n   # Add a new partition
    echo     # Auto-select partition number
    echo     # Auto-select partition start
    echo     # Auto-select partition end

    echo w      # Write changes
  ) | fdisk -W always ${DRIVE}
  checkError "partitioning ${DRIVE}"

  if [[ $1 == custom ]] ; then
    if [[ -b ${DRIVE}1 && -b ${DRIVE}2 ]] ; then
      BOOT_PART=${DRIVE}1
      ROOT_PART=${DRIVE}2
    elif [[ -b ${DRIVE}p1 && -b ${DRIVE}p2 ]] ; then
      BOOT_PART=${DRIVE}p1
      ROOT_PART=${DRIVE}p2
    else
      error "Error detecting partitions"
    fi

    mkfs.fat -F32 ${BOOT_PART}
    mkfs.btrfs -L ${hostname} -f ${ROOT_PART}

    mount -t btrfs ${ROOT_PART} /mnt/archinstall

    btrfs subv create /mnt/archinstall/@
    btrfs subv create /mnt/archinstall/@home
    btrfs subv create /mnt/archinstall/@log
    btrfs subv create /mnt/archinstall/@pkg
    btrfs subv create /mnt/archinstall/@.snapshots

    mkdir -p /mnt/archinstall/@/var/lib

    btrfs subv create /mnt/archinstall/@/var/lib/portables
    btrfs subv create /mnt/archinstall/@/var/lib/machines

    btrfs subv list /mnt/archinstall/

    umount /mnt/archinstall

    mount -t btrfs -o rw,relatime,compress=zstd:3,ssd,discard=async,space_cache=v2,subvol=/@ ${ROOT_PART} /mnt/archinstall

    mkdir -p /mnt/archinstall/home /mnt/archinstall/var/log /mnt/archinstall/var/cache/pacman/pkg /mnt/archinstall/.snapshots /mnt/archinstall/boot

    mount -t btrfs -o rw,relatime,compress=zstd:3,ssd,discard=async,space_cache=v2,subvol=/@home ${ROOT_PART} /mnt/archinstall/home
    mount -t btrfs -o rw,relatime,compress=zstd:3,ssd,discard=async,space_cache=v2,subvol=/@log ${ROOT_PART} /mnt/archinstall/var/log
    mount -t btrfs -o rw,relatime,compress=zstd:3,ssd,discard=async,space_cache=v2,subvol=/@pkg ${ROOT_PART} /mnt/archinstall/var/cache/pacman/pkg
    mount -t btrfs -o rw,relatime,compress=zstd:3,ssd,discard=async,space_cache=v2,subvol=/@.snapshots ${ROOT_PART} /mnt/archinstall/.snapshots
    mount -t vfat -o rw,relatime,fmask=0022,dmask=0022,codepage=437,iocharset=ascii,shortname=mixed,utf8,errors=remount-ro ${BOOT_PART} /mnt/archinstall/boot
  fi
}

arch_install() {
  mkdir -p /mnt/data
  mount -L CIDATA /mnt/data

  # setup arch mirrors
  setup_mirrors

  # partition and format target drive
  parition_drive

  PART_SIZE=$(fdisk -l ${DRIVE} | tail -1 | awk '{print $4 * 512}')
  cp -f user_configuration.tpl.json /tmp/user_configuration.json
  sed -e "s/DEV/${DRIVE}/g" -e "s/PART_SIZE/${PART_SIZE}/g" -i /tmp/user_configuration.json

  cp -f user_credentials.tpl.json user_credentials.json
  sed -e "s/PASSWORD/${PASSWORD}/g" -e "s/USERNAME/${USERNAME}/g" -i /tmp/user_credentials.json

  archinstall --config /tmp/user_configuration.json --creds /tmp/user_credentials.json
  checkError "archinstall"

  # copy files
  cp /etc/pacman.d/mirrorlist /mnt/etc/pacman.d/mirrorlist

  USER_HOME=/mnt/archinstall/home/${USERNAME}
  if [[ -d ${USER_FILES} ]] ; then
    cp -ar "${USER_FILES}/." ${USER_HOME}
  elif [[ -f ${USER_FILES} ]] ; then
    cd ${USER_HOME}
    case "${USER_FILES}" in
      *.tar)
        tar xf "${USER_FILES}"
        ;;
      *.tar.gz|*.tgz)
        tar xzf "${USER_FILES}"
        ;;
      *.tar.bz2|*.tbz)
        tar xjf "${USER_FILES}"
        ;;
      *.tar.xz|*.txz)
        tar xJf "${USER_FILES}"
        ;;
      *)
        cp "${USER_FILES}" .
        ;;
    esac
    cd -
  fi
  # ownership and permission
  chmod 700 ${USER_HOME}/.ssh
  chmod 600 ${USER_HOME}/.ssh/*

  arch-chroot -u ${USERNAME} /mnt/archinstall mkdir -p /home/${USERNAME}/.local/share
  arch-chroot -u ${USERNAME} /mnt/archinstall git clone git@github.com:vm75/bootstrap.git /home/${USERNAME}/.local/share/bootstrap
  arch-chroot /mnt/archinstall /home/${USERNAME}/.local/share/bootstrap --post-install

  arch-chroot -u ${USERNAME} /mnt/archinstall /home/${USERNAME}/.local/share/bootstrap --post-install

  # unmount
  umount ${BOOT_PART}
  for dev in $(mount | grep "${ROOT_PART} " | awk '{print $1}') ; do
    umount ${dev}
  done
}

setup_bridge() {
  interface=$(nmcli device | grep ethernet -m 1 | sort | awk '{print $1}')
  uuid=$(nmcli con show -f UUID,TYPE | grep ethernet -m 1 | sort | awk '{print $1}')
  if [[ -z ${ETH_IP} ]]; then
    ip=$(ip -4 a show dev ${interface} | grep inet -m 1 | awk '{print $2}')
  else
    ip=${ETH_IP}
  fi

  if [[ -z "${interface}" || -z "${uuid}" ]]; then
    return
  fi

  sudo nmcli con mod ${uuid} ifname ${interface} con-name ${interface}
  sudo nmcli con add type bridge ifname br0 con-name br0
  sudo nmcli con add type bridge-slave ifname ${interface} master br0 con-name ${interface}-slave
  if [[ -n ${ip} ]] ; then
    sudo nmcli con mod br0 ipv4.addresses "${ip}" ipv4.dhcp-hostname ${HOSTNAME%%.*} ipv4.ignore-auto-routes no ipv4.ignore-auto-dns no ipv4.method auto
  fi
  sudo nmcli con mod br0 ipv6.method ignore
  sudo nmcli con up br0
  sudo nmcli con up ${interface}-slave
}

setup_wifi() {
  interface=$(nmcli device | grep wifi -m 1 | sort | awk '{print $1}')
  if [[ -z "${interface}" || -z "${WIFI_SSID}" || -z "${WIFI_PASSWORD}" ]]; then
    return
  fi

  psk=$(wpa_passphrase "${WIFI_SSID}" "${WIFI_PASSWORD}" | grep -e "\spsk" | cut -d= -f2)

  sudo nmcli con add type wifi ifname ${interface} ssid "${WIFI_SSID}" con-name ${interface}
  sudo nmcli con mod ${interface} wifi-sec.key-mgmt wpa-psk wifi-sec.psk "${psk}"

  if [[ -n "${WIFI_IP}" ]]; then
    sudo nmcli con mod ${interface} ipv4.addresses "${WIFI_IP}"
  fi
}

root_postinstall() {
  # user
  usermod -aG wheel,audio ${USERNAME}

  # sudo
  mkdir -p /etc/sudoers.d
  echo "${USERNAME} ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/00_${USERNAME}

  # key for aur
  gpg --keyserver keyserver.ubuntu.com --recv-keys 5C4A26CD4CC8C397

  # vi
  rm -f /usr/bin/vi
  ln -s /usr/bin/vim /usr/bin/vi

  # crontab
  systemctl enable cronie

  # sshd
  systemctl enable sshd.service

  # network
  setup_bridge
  setup_wifi

  exit 0
}

install_yay() {
  mkdir -p .aur
  cd .aur

  git clone https://aur.archlinux.org/yay.git
  cd yay
  makepkg -si --noconfirm
  checkError "installing yay"
  cd ~
}

user_postinstall() {
  install_yay

  # install aur apps
  yay -Sy --needed --noconfirm udevil rc-local cpulimit ntfsprogs-ntfs3

  # aur services
  systemctl --user enable rc-local.service

  exit 0
}

main() {
  cd ${BOOTSTRAP_DIR}

  if [[ $1 == --post-install ]] ; then
    if [[ ${USER} == root ]] ; then
      root_postinstall
    else
      user_postinstall
    fi
  fi

  mkdir -p /mnt/data
  mount -L CIDATA /mnt/data
  if [[ -f /mnt/data/.archinstall ]] ; then
    . /mnt/data/.archinstall
  fi

  while getopts "Dc:d:h" option; do
    case "${option}" in
    D)
      set -x
      ;;
    c)
      if [[ ! -f ${OPTARG} ]] ; then
        error "Invalid config file ${OPTARG}"
      fi
      . ${OPTARG}
      ;;
    d)
      DRIVE=${OPTARG}
      ;;
    h)
      usage
      exit
      ;;
    esac
  done
  shift $((OPTIND-1))

  if [[ -z ${DRIVE} ]] ; then
    error "No valid drive found"
  fi

  if [[ -b /dev/${DRIVE} ]] ; then
    DRIVE="/dev/${DRIVE}"
  elif [[ -b ${DRIVE} ]] ; then
    DRIVE=${DRIVE}
  else
    error "Invalid drive ${DRIVE}"
  fi

  arch_install
}

main "$@"
